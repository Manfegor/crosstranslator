package def;
import main.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;

terminal CREATE, IDENTIFIER, END;
terminal VARIABLE, COMMA, LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK, COLON;
terminal INT, STRING, DOUBLE, BOOLEAN, VOID, ARRAY, DICTIONARY, THIS;
terminal PLUS, MINUS, MULT, DIV, PLUSPLUS, MINUSMINUS, ANDAND, OROR, EQ, EQEQ, PLUSEQ, MINUSEQ, MULTEQ, DIVEQ, LT, GT, LE, GE;
terminal IF, FUNCTION, SWITCH, FOR, WHILE, PUBLIC, PRIVATE;
terminal INTEGER_LITERAL;

non terminal Program        program;
non terminal List<ClassExpression>     clslist;
non terminal ModifierType modifier;
non terminal ClassExpression           cls;
non terminal Block block;
non terminal List<VarExpression> identlist;
non terminal VariableType typident;
non terminal FunctExpression funct;
non terminal VarExpression variable;
non terminal Expression expr;
non terminal List<Expression> exprlist;
non terminal AssignmentExpression assignment;
non terminal FunctionCallExpression functCall;

start with program;

program   ::=  clslist:cl                        {: RESULT = new Program(cl); :}
    ;

clslist  ::=  cls:c clslist:cl                           {: cl.add(c); RESULT = cl; :}
    | /* empty */                                  {: RESULT = new LinkedList<ClassExpression>(); :}
    ;
    
cls ::= CREATE IDENTIFIER:i block END			{: RESULT = new ClassExpression(i.toString()); :}
	;
	
block ::=	expr:e				{: Block b = new Block(); b.addMember(e); RESULT = b; :}
	|	block:b expr:e		{: b.addMember(e); RESULT = b; :}
	;
	
expr ::=	assignment
	|	funct
	|	variable
	;

assignment ::= variable:v1 EQ variable:v2		{: RESULT = new AssignmentExpression(v1,v2); :} 
	;
	
funct ::= FUNCTION IDENTIFIER:i LPAREN identlist:il RPAREN block:b END		{: RESULT = new FunctExpression(i.toString(), il, b); :}
	|	modifier:m FUNCTION IDENTIFIER:i LPAREN identlist:il RPAREN variable:v END	{: Block b = new Block(); b.addMember(v); FunctExpression f = new FunctExpression(i.toString(), il, b); f.setModifier(m); RESULT = f; :}
	;
	
identlist ::=	variable:v			{: LinkedList<VarExpression> il = new LinkedList<VarExpression>(); il.add(v); RESULT = il; :}
	|	identlist:il variable:v		{: il.add(v); RESULT = il; :}
	;
	
typident ::=	INT			{: RESULT = VariableType.INT; :}
	|	STRING			{: RESULT = VariableType.STRING; :}
	|	DOUBLE			{: RESULT = VariableType.DOUBLE; :}
	|	BOOLEAN			{: RESULT = VariableType.BOOLEAN; :}
	;

modifier ::= PUBLIC			{: RESULT = ModifierType.PUBLIC; :}
	|	PRIVATE				{: RESULT = ModifierType.PRIVATE; :}
	;
	
variable ::=	typident:t VARIABLE:v		{: RESULT = new VarExpression(v.toString(), ModifierType.PRIVATE, t); :}
	|	modifier:m typident:t VARIABLE:v		{: RESULT = new VarExpression(v.toString(), m, t); :}
	|	INTEGER_LITERAL:v		{: RESULT = new VarExpression(v.toString(), ModifierType.PRIVATE, VariableType.INT); :}
	|	modifier:m INTEGER_LITERAL:v		{: RESULT = new VarExpression(v.toString(), m, VariableType.INT); :}
	;